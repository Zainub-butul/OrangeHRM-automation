{"name": "test_add_vacancy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0xb3c333+65459]\n\tGetHandleVerifier [0x0xb3c374+65524]\n\t(No symbol) [0x0x95d973]\n\t(No symbol) [0x0x9a76e7]\n\t(No symbol) [0x0x9a7a8b]\n\t(No symbol) [0x0x9edea2]\n\t(No symbol) [0x0x9c9e44]\n\t(No symbol) [0x0x9eb606]\n\t(No symbol) [0x0x9c9bf6]\n\t(No symbol) [0x0x99b38e]\n\t(No symbol) [0x0x99c274]\n\tGetHandleVerifier [0x0xdbeda3+2697763]\n\tGetHandleVerifier [0x0xdb9ec7+2677575]\n\tGetHandleVerifier [0x0xb64194+228884]\n\tGetHandleVerifier [0x0xb549f8+165496]\n\tGetHandleVerifier [0x0xb5b18d+192013]\n\tGetHandleVerifier [0x0xb447d8+99416]\n\tGetHandleVerifier [0x0xb44972+99826]\n\tGetHandleVerifier [0x0xb2ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]", "trace": "vacancy_page = <pages.vacancy_page.VacancyPage object at 0x00000243186AD7F0>\n\n    def test_add_vacancy(vacancy_page):\n        print(\">>> Test: Add Vacancy started\")\n    \n        # Navigate to vacancies\n        print(\">>> Navigating to Vacancies menu\")\n        vacancy_page.navigate_to_vacancies()\n    \n        # Click Add\n        print(\">>> Clicking Add button\")\n        vacancy_page.click_add()\n    \n        # Fill form\n        print(\">>> Selecting Job Title\")\n        vacancy_page.select_job_title(\"QA Engineer\")  # must exist in dropdown\n    \n        print(\">>> Entering Vacancy Name\")\n        vacancy_page.enter_vacancy_name(\"Automation Tester Vacancy\")\n    \n        print(\">>> Entering Hiring Manager (autocomplete)\")\n        input_field = vacancy_page.driver.find_element(By.XPATH, \"//input[@placeholder='Type for hints...']\")\n        input_field.clear()\n        input_field.send_keys(\"Ranga\")  # type partial name\n        time.sleep(1)  # wait for suggestions to render\n    \n        # Use JavaScript click for suggestion\n        suggestion_xpath = \"//div[@role='listbox']//span[text()='Ranga Akunuri']\"\n>       suggestion = WebDriverWait(vacancy_page.driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, suggestion_xpath))\n        )\n\ntests\\Recruitment\\test_vacancy.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"40a8cadd53a007d550f0c078fba4200d\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002431863AA20>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xb3c333+65459]\nE       \tGetHandleVerifier [0x0xb3c374+65524]\nE       \t(No symbol) [0x0x95d973]\nE       \t(No symbol) [0x0x9a76e7]\nE       \t(No symbol) [0x0x9a7a8b]\nE       \t(No symbol) [0x0x9edea2]\nE       \t(No symbol) [0x0x9c9e44]\nE       \t(No symbol) [0x0x9eb606]\nE       \t(No symbol) [0x0x9c9bf6]\nE       \t(No symbol) [0x0x99b38e]\nE       \t(No symbol) [0x0x99c274]\nE       \tGetHandleVerifier [0x0xdbeda3+2697763]\nE       \tGetHandleVerifier [0x0xdb9ec7+2677575]\nE       \tGetHandleVerifier [0x0xb64194+228884]\nE       \tGetHandleVerifier [0x0xb549f8+165496]\nE       \tGetHandleVerifier [0x0xb5b18d+192013]\nE       \tGetHandleVerifier [0x0xb447d8+99416]\nE       \tGetHandleVerifier [0x0xb44972+99826]\nE       \tGetHandleVerifier [0x0xb2ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "3996681d-0b63-45b4-b4cb-184cd2d23d5d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7ff1fad6-08b2-43e1-b82f-f0e4ac594f34-attachment.txt", "type": "text/plain"}], "start": 1759834698404, "stop": 1759834718604, "uuid": "f066add3-fe3c-4083-9393-d0de0c707b0b", "historyId": "2958f09b4f2b97223f008fdc5f610099", "testCaseId": "2958f09b4f2b97223f008fdc5f610099", "fullName": "tests.Recruitment.test_vacancy#test_add_vacancy", "labels": [{"name": "parentSuite", "value": "tests.Recruitment"}, {"name": "suite", "value": "test_vacancy"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "7020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Recruitment.test_vacancy"}], "titlePath": ["tests", "Recruitment", "test_vacancy.py"]}
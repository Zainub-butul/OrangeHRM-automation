{"name": "test_add_multiple_employees_with_different_data[Alice-Johnson-False]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x57c333+65459]\n\tGetHandleVerifier [0x0x57c374+65524]\n\t(No symbol) [0x0x39d973]\n\t(No symbol) [0x0x3af961]\n\t(No symbol) [0x0x3aea30]\n\t(No symbol) [0x0x3a4e1c]\n\t(No symbol) [0x0x3a3321]\n\t(No symbol) [0x0x3a6734]\n\t(No symbol) [0x0x3a67c8]\n\t(No symbol) [0x0x3e941a]\n\t(No symbol) [0x0x3dd11a]\n\t(No symbol) [0x0x409dfc]\n\t(No symbol) [0x0x3dcbf4]\n\t(No symbol) [0x0x409fb4]\n\t(No symbol) [0x0x42b606]\n\t(No symbol) [0x0x409bf6]\n\t(No symbol) [0x0x3db38e]\n\t(No symbol) [0x0x3dc274]\n\tGetHandleVerifier [0x0x7feda3+2697763]\n\tGetHandleVerifier [0x0x7f9ec7+2677575]\n\tGetHandleVerifier [0x0x5a4194+228884]\n\tGetHandleVerifier [0x0x5949f8+165496]\n\tGetHandleVerifier [0x0x59b18d+192013]\n\tGetHandleVerifier [0x0x5847d8+99416]\n\tGetHandleVerifier [0x0x584972+99826]\n\tGetHandleVerifier [0x0x56ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]", "trace": "self = <tests.PIM.test_add_multiple_employees_with_different_data.TestEmployeeAddition object at 0x00000295F15042D0>\nfresh_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4eacbab60bf530da14deb91d59e8b31b\")>, first_name = 'Alice'\nlast_name = 'Johnson', has_middle_name = False\n\n    @pytest.mark.parametrize(\"first_name,last_name,has_middle_name\", [\n        (\"Alice\", \"Johnson\", False),\n        (\"Bob\", \"Smith\", True),\n        (\"Carol\", \"Davis\", False),\n        (\"David\", \"Wilson\", True),\n        (\"Emma\", \"Brown\", False)\n    ])\n    def test_add_multiple_employees_with_different_data(self, fresh_driver, first_name, last_name, has_middle_name):\n        driver = fresh_driver  # Use fresh browser session\n    \n        print(f\"\\n>>> Test: Add Employee - {first_name} {last_name}\")\n    \n        # Initialize page objects\n        login_page = LoginPage(driver)\n        dashboard_page = DashboardPage(driver)\n        pim_page = PIMPage(driver)\n        add_employee_page = AddEmployeePage(driver)\n    \n        # Step 1: Login\n        login_page.login(Config.USERNAME, Config.PASSWORD)\n    \n        # Step 2: Navigate to Add Employee\n        dashboard_page.navigate_to_pim()\n        pim_page.navigate_to_add_employee()\n    \n        # Step 3: Fill Employee Data\n        middle_name = TestDataGenerator.generate_random_string(6) if has_middle_name else \"\"\n        print(f\">>> Creating employee: {first_name} {middle_name} {last_name}\")\n    \n        add_employee_page.fill_basic_employee_details(first_name, last_name)\n        if middle_name:\n            add_employee_page.fill_middle_name(middle_name)\n    \n        # Step 4: Save Employee\n        employee_id = add_employee_page.get_employee_id()\n        add_employee_page.save_employee()\n    \n        # Step 5: Assert employee was created\n        assert add_employee_page.is_employee_saved_successfully(), f\"❌ Failed to create employee: {first_name} {last_name}\"\n        print(f\"✅ Employee created successfully: {first_name} {middle_name} {last_name} (ID: {employee_id})\")\n    \n        # Step 6: Prepare for next iteration (navigate again to Add Employee page)\n        # Not strictly needed since each test has fresh driver, but safe:\n>       pim_page.navigate_to_add_employee()\n\ntests\\PIM\\test_add_multiple_employees_with_different_data.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\pim_page.py:27: in navigate_to_add_employee\n    self.click_element(self.ADD_EMPLOYEE_MENU)\npages\\base_page.py:25: in click_element\n    element.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000295F1506FD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...hunk [0x0x76307ba9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\\\\n\\\\tRtlClearBits [0x0x7788c26f+191]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x57c333+65459]\nE       \tGetHandleVerifier [0x0x57c374+65524]\nE       \t(No symbol) [0x0x39d973]\nE       \t(No symbol) [0x0x3af961]\nE       \t(No symbol) [0x0x3aea30]\nE       \t(No symbol) [0x0x3a4e1c]\nE       \t(No symbol) [0x0x3a3321]\nE       \t(No symbol) [0x0x3a6734]\nE       \t(No symbol) [0x0x3a67c8]\nE       \t(No symbol) [0x0x3e941a]\nE       \t(No symbol) [0x0x3dd11a]\nE       \t(No symbol) [0x0x409dfc]\nE       \t(No symbol) [0x0x3dcbf4]\nE       \t(No symbol) [0x0x409fb4]\nE       \t(No symbol) [0x0x42b606]\nE       \t(No symbol) [0x0x409bf6]\nE       \t(No symbol) [0x0x3db38e]\nE       \t(No symbol) [0x0x3dc274]\nE       \tGetHandleVerifier [0x0x7feda3+2697763]\nE       \tGetHandleVerifier [0x0x7f9ec7+2677575]\nE       \tGetHandleVerifier [0x0x5a4194+228884]\nE       \tGetHandleVerifier [0x0x5949f8+165496]\nE       \tGetHandleVerifier [0x0x59b18d+192013]\nE       \tGetHandleVerifier [0x0x5847d8+99416]\nE       \tGetHandleVerifier [0x0x584972+99826]\nE       \tGetHandleVerifier [0x0x56ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "6d869bd1-9649-4beb-8fec-11da9ea1eb29-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8b0e620b-d9f8-4312-9b26-a55b44eb51e5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "first_name", "value": "'Alice'"}, {"name": "last_name", "value": "'Johnson'"}, {"name": "has_middle_name", "value": "False"}], "start": 1760079738008, "stop": 1760079777481, "uuid": "e4363c75-6701-43b1-b207-99319d7d262e", "historyId": "80ef0b821c9d656e55a428f44f5164af", "testCaseId": "79ce4f1908fca3decb7dcdfec97fda17", "fullName": "tests.PIM.test_add_multiple_employees_with_different_data.TestEmployeeAddition#test_add_multiple_employees_with_different_data", "labels": [{"name": "parentSuite", "value": "tests.PIM"}, {"name": "suite", "value": "test_add_multiple_employees_with_different_data"}, {"name": "subSuite", "value": "TestEmployeeAddition"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "13348-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.PIM.test_add_multiple_employees_with_different_data"}], "titlePath": ["tests", "PIM", "test_add_multiple_employees_with_different_data.py", "TestEmployeeAddition"]}
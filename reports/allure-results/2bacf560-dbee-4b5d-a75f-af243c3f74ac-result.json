{"name": "test_add_vacancy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x90c333+65459]\n\tGetHandleVerifier [0x0x90c374+65524]\n\t(No symbol) [0x0x72d973]\n\t(No symbol) [0x0x7776e7]\n\t(No symbol) [0x0x777a8b]\n\t(No symbol) [0x0x7bdea2]\n\t(No symbol) [0x0x799e44]\n\t(No symbol) [0x0x7bb606]\n\t(No symbol) [0x0x799bf6]\n\t(No symbol) [0x0x76b38e]\n\t(No symbol) [0x0x76c274]\n\tGetHandleVerifier [0x0xb8eda3+2697763]\n\tGetHandleVerifier [0x0xb89ec7+2677575]\n\tGetHandleVerifier [0x0x934194+228884]\n\tGetHandleVerifier [0x0x9249f8+165496]\n\tGetHandleVerifier [0x0x92b18d+192013]\n\tGetHandleVerifier [0x0x9147d8+99416]\n\tGetHandleVerifier [0x0x914972+99826]\n\tGetHandleVerifier [0x0x8febea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"828ee0707c353c94172d53db21917976\")>\n\n    @pytest.fixture\n    def login_valid(driver):\n        \"\"\"Log in before running tests\"\"\"\n        print(\">>> Starting login fixture\")\n        login_page = LoginPage(driver)\n>       login_page.login(\"Admin\", \"admin123\")  # use correct creds\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\Recruitment\\test_vacancy.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:26: in login\n    self.enter_text(self.USERNAME_INPUT, username)\npages\\base_page.py:30: in enter_text\n    element = self.find_element(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^\npages\\base_page.py:16: in find_element\n    return self.wait.until(EC.presence_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"828ee0707c353c94172d53db21917976\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001AAB1B549A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x90c333+65459]\nE       \tGetHandleVerifier [0x0x90c374+65524]\nE       \t(No symbol) [0x0x72d973]\nE       \t(No symbol) [0x0x7776e7]\nE       \t(No symbol) [0x0x777a8b]\nE       \t(No symbol) [0x0x7bdea2]\nE       \t(No symbol) [0x0x799e44]\nE       \t(No symbol) [0x0x7bb606]\nE       \t(No symbol) [0x0x799bf6]\nE       \t(No symbol) [0x0x76b38e]\nE       \t(No symbol) [0x0x76c274]\nE       \tGetHandleVerifier [0x0xb8eda3+2697763]\nE       \tGetHandleVerifier [0x0xb89ec7+2677575]\nE       \tGetHandleVerifier [0x0x934194+228884]\nE       \tGetHandleVerifier [0x0x9249f8+165496]\nE       \tGetHandleVerifier [0x0x92b18d+192013]\nE       \tGetHandleVerifier [0x0x9147d8+99416]\nE       \tGetHandleVerifier [0x0x914972+99826]\nE       \tGetHandleVerifier [0x0x8febea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "832e480a-6b47-474e-bd86-0a51bb044af8-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9f9defc3-2c74-4237-8e95-fe905ce2ad81-attachment.txt", "type": "text/plain"}], "start": 1759831131244, "stop": 1759831131244, "uuid": "ef344a43-faa2-4af2-a4db-03ab13efbaf9", "historyId": "2958f09b4f2b97223f008fdc5f610099", "testCaseId": "2958f09b4f2b97223f008fdc5f610099", "fullName": "tests.Recruitment.test_vacancy#test_add_vacancy", "labels": [{"name": "parentSuite", "value": "tests.Recruitment"}, {"name": "suite", "value": "test_vacancy"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "6700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Recruitment.test_vacancy"}], "titlePath": ["tests", "Recruitment", "test_vacancy.py"]}
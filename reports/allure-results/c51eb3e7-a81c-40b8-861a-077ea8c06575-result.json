{"name": "test_add_vacancy", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0xf8c333+65459]\n\tGetHandleVerifier [0x0xf8c374+65524]\n\t(No symbol) [0x0xdad973]\n\t(No symbol) [0x0xdf76e7]\n\t(No symbol) [0x0xdf7a8b]\n\t(No symbol) [0x0xe3dea2]\n\t(No symbol) [0x0xe19e44]\n\t(No symbol) [0x0xe3b606]\n\t(No symbol) [0x0xe19bf6]\n\t(No symbol) [0x0xdeb38e]\n\t(No symbol) [0x0xdec274]\n\tGetHandleVerifier [0x0x120eda3+2697763]\n\tGetHandleVerifier [0x0x1209ec7+2677575]\n\tGetHandleVerifier [0x0xfb4194+228884]\n\tGetHandleVerifier [0x0xfa49f8+165496]\n\tGetHandleVerifier [0x0xfab18d+192013]\n\tGetHandleVerifier [0x0xf947d8+99416]\n\tGetHandleVerifier [0x0xf94972+99826]\n\tGetHandleVerifier [0x0xf7ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]", "trace": "vacancy_page = <pages.vacancy_page.VacancyPage object at 0x000001B13336D7F0>\n\n    def test_add_vacancy(vacancy_page):\n        print(\">>> Test: Add Vacancy started\")\n    \n        # Navigate to vacancies\n        print(\">>> Navigating to Vacancies menu\")\n        vacancy_page.navigate_to_vacancies()\n    \n        print(\">>> Clicking Add button\")\n        vacancy_page.click_add()\n    \n        # Fill form\n        print(\">>> Selecting Job Title\")\n        vacancy_page.select_job_title(\"QA Engineer\")  # must exist in dropdown\n    \n        print(\">>> Entering Vacancy Name\")\n        vacancy_page.enter_vacancy_name(\"Automation Tester Vacancy\")\n    \n        print(\">>> Entering Hiring Manager\")\n        vacancy_page.enter_hiring_manager(\"Ranga Akunuri\")  # valid HR name in demo site\n    \n        print(\">>> Saving vacancy\")\n        vacancy_page.save_vacancy()\n    \n        # Assert vacancy added â†’ e.g. check success toast or vacancy listed\n        try:\n            print(\">>> Verifying success message\")\n>           success_message = vacancy_page.wait.until(\n                EC.visibility_of_element_located(\n                    (By.XPATH, \"//div[contains(@class,'oxd-toast-content-text') and text()='Success']\")\n                )\n            )\n\ntests\\Recruitment\\test_vacancy.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"bef77b1503b55ca46f607b880ccf16eb\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001B132D8FB00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xf8c333+65459]\nE       \tGetHandleVerifier [0x0xf8c374+65524]\nE       \t(No symbol) [0x0xdad973]\nE       \t(No symbol) [0x0xdf76e7]\nE       \t(No symbol) [0x0xdf7a8b]\nE       \t(No symbol) [0x0xe3dea2]\nE       \t(No symbol) [0x0xe19e44]\nE       \t(No symbol) [0x0xe3b606]\nE       \t(No symbol) [0x0xe19bf6]\nE       \t(No symbol) [0x0xdeb38e]\nE       \t(No symbol) [0x0xdec274]\nE       \tGetHandleVerifier [0x0x120eda3+2697763]\nE       \tGetHandleVerifier [0x0x1209ec7+2677575]\nE       \tGetHandleVerifier [0x0xfb4194+228884]\nE       \tGetHandleVerifier [0x0xfa49f8+165496]\nE       \tGetHandleVerifier [0x0xfab18d+192013]\nE       \tGetHandleVerifier [0x0xf947d8+99416]\nE       \tGetHandleVerifier [0x0xf94972+99826]\nE       \tGetHandleVerifier [0x0xf7ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "446c7d5e-de6e-427f-aba5-2f61dc9d0879-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "aa92b847-0b92-4eb2-ad01-dc1f115de1f6-attachment.txt", "type": "text/plain"}], "start": 1759833429555, "stop": 1759833456724, "uuid": "3c61d52c-f454-44e7-ad38-49fb022ce599", "historyId": "2958f09b4f2b97223f008fdc5f610099", "testCaseId": "2958f09b4f2b97223f008fdc5f610099", "fullName": "tests.Recruitment.test_vacancy#test_add_vacancy", "labels": [{"name": "parentSuite", "value": "tests.Recruitment"}, {"name": "suite", "value": "test_vacancy"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "11980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Recruitment.test_vacancy"}], "titlePath": ["tests", "Recruitment", "test_vacancy.py"]}
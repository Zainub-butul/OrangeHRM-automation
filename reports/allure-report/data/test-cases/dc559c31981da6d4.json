{"uid":"dc559c31981da6d4","name":"test_add_user","fullName":"tests.Admin.test_add_user#test_add_user","historyId":"348d0d352e469cfe99a6e2ac43806efa","time":{"start":1760079595768,"stop":1760079619045,"duration":23277},"description":"Test adding a new user with valid data","descriptionHtml":"<p>Test adding a new user with valid data</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Node with given id does not belong to the document\"}\n  (Session info: chrome=140.0.7339.208)\nStacktrace:\n\tGetHandleVerifier [0x0x57c333+65459]\n\tGetHandleVerifier [0x0x57c374+65524]\n\t(No symbol) [0x0x39d973]\n\t(No symbol) [0x0x38d710]\n\t(No symbol) [0x0x38c015]\n\t(No symbol) [0x0x38c8a7]\n\t(No symbol) [0x0x3adaef]\n\t(No symbol) [0x0x3afc24]\n\t(No symbol) [0x0x3aea30]\n\t(No symbol) [0x0x3a4e1c]\n\t(No symbol) [0x0x3a3321]\n\t(No symbol) [0x0x3a6734]\n\t(No symbol) [0x0x3a67c8]\n\t(No symbol) [0x0x3e204c]\n\t(No symbol) [0x0x3e05e6]\n\t(No symbol) [0x0x409dfc]\n\t(No symbol) [0x0x3dcbf4]\n\t(No symbol) [0x0x409fb4]\n\t(No symbol) [0x0x42b606]\n\t(No symbol) [0x0x409bf6]\n\t(No symbol) [0x0x3db38e]\n\t(No symbol) [0x0x3dc274]\n\tGetHandleVerifier [0x0x7feda3+2697763]\n\tGetHandleVerifier [0x0x7f9ec7+2677575]\n\tGetHandleVerifier [0x0x5a4194+228884]\n\tGetHandleVerifier [0x0x5949f8+165496]\n\tGetHandleVerifier [0x0x59b18d+192013]\n\tGetHandleVerifier [0x0x5847d8+99416]\n\tGetHandleVerifier [0x0x584972+99826]\n\tGetHandleVerifier [0x0x56ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]","statusTrace":"admin_page = <pages.admin_page.AdminPage object at 0x00000295F15582F0>\n\n    def test_add_user(admin_page):\n        \"\"\"Test adding a new user with valid data\"\"\"\n        print(\">>> Test: Add User started\")\n    \n        # Navigate to Admin module\n        print(\">>> Navigating to Admin module\")\n        admin_page.navigate_to_admin()\n    \n        print(\">>> Clicking Add button\")\n        admin_page.click_add_button()\n    \n        # Generate unique username\n        unique_username = f\"testuser_{int(time.time())}\"\n        password = \"Test@123\"\n        print(f\">>> Generated unique username: {unique_username}\")\n    \n        # Fill form\n        print(\">>> Selecting User Role: ESS\")\n        admin_page.select_user_role(\"ESS\")\n    \n        print(\">>> Selecting Employee Name: John Doe\")\n        admin_page.select_employee_name(\"John Doe\")  # searches and selects first employee\n    \n        print(\">>> Selecting Status: Enabled\")\n        admin_page.select_status(\"Enabled\")\n    \n        print(f\">>> Entering Username: {unique_username}\")\n        admin_page.enter_username(unique_username)\n    \n        print(\">>> Entering Password\")\n        admin_page.enter_password(password)\n    \n        print(\">>> Entering Confirm Password\")\n        admin_page.enter_confirm_password(password)\n    \n        print(\">>> Clicking Save\")\n        admin_page.click_save()\n    \n        # Assert user added - check success message\n        print(\">>> Verifying if user was saved successfully\")\n        assert admin_page.is_user_saved_successfully(), \"⚠️ User was not saved successfully\"\n        print(f\"✅ User '{unique_username}' saved successfully\")\n    \n        # Verify user appears in list\n        print(f\">>> Searching for user in list: {unique_username}\")\n        time.sleep(2)\n>       admin_page.search_user(unique_username)\n\ntests\\Admin\\test_add_user.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\admin_page.py:245: in search_user\n    search_field.send_keys(username)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:304: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000295F148B0E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: unhandled inspector error: {\\\\\"c...hunk [0x0x76307ba9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\\\\n\\\\tRtlClearBits [0x0x7788c26f+191]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Node with given id does not belong to the document\"}\nE         (Session info: chrome=140.0.7339.208)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x57c333+65459]\nE       \tGetHandleVerifier [0x0x57c374+65524]\nE       \t(No symbol) [0x0x39d973]\nE       \t(No symbol) [0x0x38d710]\nE       \t(No symbol) [0x0x38c015]\nE       \t(No symbol) [0x0x38c8a7]\nE       \t(No symbol) [0x0x3adaef]\nE       \t(No symbol) [0x0x3afc24]\nE       \t(No symbol) [0x0x3aea30]\nE       \t(No symbol) [0x0x3a4e1c]\nE       \t(No symbol) [0x0x3a3321]\nE       \t(No symbol) [0x0x3a6734]\nE       \t(No symbol) [0x0x3a67c8]\nE       \t(No symbol) [0x0x3e204c]\nE       \t(No symbol) [0x0x3e05e6]\nE       \t(No symbol) [0x0x409dfc]\nE       \t(No symbol) [0x0x3dcbf4]\nE       \t(No symbol) [0x0x409fb4]\nE       \t(No symbol) [0x0x42b606]\nE       \t(No symbol) [0x0x409bf6]\nE       \t(No symbol) [0x0x3db38e]\nE       \t(No symbol) [0x0x3dc274]\nE       \tGetHandleVerifier [0x0x7feda3+2697763]\nE       \tGetHandleVerifier [0x0x7f9ec7+2677575]\nE       \tGetHandleVerifier [0x0x5a4194+228884]\nE       \tGetHandleVerifier [0x0x5949f8+165496]\nE       \tGetHandleVerifier [0x0x59b18d+192013]\nE       \tGetHandleVerifier [0x0x5847d8+99416]\nE       \tGetHandleVerifier [0x0x584972+99826]\nE       \tGetHandleVerifier [0x0x56ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"driver_setup","time":{"start":1760079579961,"stop":1760079587152,"duration":7191},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1760079587152,"stop":1760079592849,"duration":5697},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"login_valid","time":{"start":1760079592849,"stop":1760079595764,"duration":2915},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"admin_page","time":{"start":1760079595764,"stop":1760079595764,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"Test adding a new user with valid data","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Node with given id does not belong to the document\"}\n  (Session info: chrome=140.0.7339.208)\nStacktrace:\n\tGetHandleVerifier [0x0x57c333+65459]\n\tGetHandleVerifier [0x0x57c374+65524]\n\t(No symbol) [0x0x39d973]\n\t(No symbol) [0x0x38d710]\n\t(No symbol) [0x0x38c015]\n\t(No symbol) [0x0x38c8a7]\n\t(No symbol) [0x0x3adaef]\n\t(No symbol) [0x0x3afc24]\n\t(No symbol) [0x0x3aea30]\n\t(No symbol) [0x0x3a4e1c]\n\t(No symbol) [0x0x3a3321]\n\t(No symbol) [0x0x3a6734]\n\t(No symbol) [0x0x3a67c8]\n\t(No symbol) [0x0x3e204c]\n\t(No symbol) [0x0x3e05e6]\n\t(No symbol) [0x0x409dfc]\n\t(No symbol) [0x0x3dcbf4]\n\t(No symbol) [0x0x409fb4]\n\t(No symbol) [0x0x42b606]\n\t(No symbol) [0x0x409bf6]\n\t(No symbol) [0x0x3db38e]\n\t(No symbol) [0x0x3dc274]\n\tGetHandleVerifier [0x0x7feda3+2697763]\n\tGetHandleVerifier [0x0x7f9ec7+2677575]\n\tGetHandleVerifier [0x0x5a4194+228884]\n\tGetHandleVerifier [0x0x5949f8+165496]\n\tGetHandleVerifier [0x0x59b18d+192013]\n\tGetHandleVerifier [0x0x5847d8+99416]\n\tGetHandleVerifier [0x0x584972+99826]\n\tGetHandleVerifier [0x0x56ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]","statusTrace":"admin_page = <pages.admin_page.AdminPage object at 0x00000295F15582F0>\n\n    def test_add_user(admin_page):\n        \"\"\"Test adding a new user with valid data\"\"\"\n        print(\">>> Test: Add User started\")\n    \n        # Navigate to Admin module\n        print(\">>> Navigating to Admin module\")\n        admin_page.navigate_to_admin()\n    \n        print(\">>> Clicking Add button\")\n        admin_page.click_add_button()\n    \n        # Generate unique username\n        unique_username = f\"testuser_{int(time.time())}\"\n        password = \"Test@123\"\n        print(f\">>> Generated unique username: {unique_username}\")\n    \n        # Fill form\n        print(\">>> Selecting User Role: ESS\")\n        admin_page.select_user_role(\"ESS\")\n    \n        print(\">>> Selecting Employee Name: John Doe\")\n        admin_page.select_employee_name(\"John Doe\")  # searches and selects first employee\n    \n        print(\">>> Selecting Status: Enabled\")\n        admin_page.select_status(\"Enabled\")\n    \n        print(f\">>> Entering Username: {unique_username}\")\n        admin_page.enter_username(unique_username)\n    \n        print(\">>> Entering Password\")\n        admin_page.enter_password(password)\n    \n        print(\">>> Entering Confirm Password\")\n        admin_page.enter_confirm_password(password)\n    \n        print(\">>> Clicking Save\")\n        admin_page.click_save()\n    \n        # Assert user added - check success message\n        print(\">>> Verifying if user was saved successfully\")\n        assert admin_page.is_user_saved_successfully(), \"⚠️ User was not saved successfully\"\n        print(f\"✅ User '{unique_username}' saved successfully\")\n    \n        # Verify user appears in list\n        print(f\">>> Searching for user in list: {unique_username}\")\n        time.sleep(2)\n>       admin_page.search_user(unique_username)\n\ntests\\Admin\\test_add_user.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\admin_page.py:245: in search_user\n    search_field.send_keys(username)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:304: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000295F148B0E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: unhandled inspector error: {\\\\\"c...hunk [0x0x76307ba9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\\\\n\\\\tRtlClearBits [0x0x7788c26f+191]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Node with given id does not belong to the document\"}\nE         (Session info: chrome=140.0.7339.208)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x57c333+65459]\nE       \tGetHandleVerifier [0x0x57c374+65524]\nE       \t(No symbol) [0x0x39d973]\nE       \t(No symbol) [0x0x38d710]\nE       \t(No symbol) [0x0x38c015]\nE       \t(No symbol) [0x0x38c8a7]\nE       \t(No symbol) [0x0x3adaef]\nE       \t(No symbol) [0x0x3afc24]\nE       \t(No symbol) [0x0x3aea30]\nE       \t(No symbol) [0x0x3a4e1c]\nE       \t(No symbol) [0x0x3a3321]\nE       \t(No symbol) [0x0x3a6734]\nE       \t(No symbol) [0x0x3a67c8]\nE       \t(No symbol) [0x0x3e204c]\nE       \t(No symbol) [0x0x3e05e6]\nE       \t(No symbol) [0x0x409dfc]\nE       \t(No symbol) [0x0x3dcbf4]\nE       \t(No symbol) [0x0x409fb4]\nE       \t(No symbol) [0x0x42b606]\nE       \t(No symbol) [0x0x409bf6]\nE       \t(No symbol) [0x0x3db38e]\nE       \t(No symbol) [0x0x3dc274]\nE       \tGetHandleVerifier [0x0x7feda3+2697763]\nE       \tGetHandleVerifier [0x0x7f9ec7+2677575]\nE       \tGetHandleVerifier [0x0x5a4194+228884]\nE       \tGetHandleVerifier [0x0x5949f8+165496]\nE       \tGetHandleVerifier [0x0x59b18d+192013]\nE       \tGetHandleVerifier [0x0x5847d8+99416]\nE       \tGetHandleVerifier [0x0x584972+99826]\nE       \tGetHandleVerifier [0x0x56ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76307ba9+25]\nE       \tRtlInitializeExceptionChain [0x0x7788c2eb+107]\nE       \tRtlClearBits [0x0x7788c26f+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"619b1f30662addfb","name":"log","source":"619b1f30662addfb.txt","type":"text/plain","size":1066},{"uid":"4e4c3a4d66cf0bd7","name":"stdout","source":"4e4c3a4d66cf0bd7.txt","type":"text/plain","size":2593}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"login_valid::0","time":{"start":1760079619964,"stop":1760079619964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver::0","time":{"start":1760079619966,"stop":1760079620114,"duration":148},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver_setup::0","time":{"start":1760079927786,"stop":1760079944113,"duration":16327},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests.Admin"},{"name":"suite","value":"test_add_user"},{"name":"host","value":"LAPTOP-AQ7JHBIL"},{"name":"thread","value":"13348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.Admin.test_add_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a1d2411a8e8d3d95","status":"passed","time":{"start":1759830239089,"stop":1759830266030,"duration":26941}},{"uid":"219d2decd082b856","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x126c333+65459]\n\tGetHandleVerifier [0x0x126c374+65524]\n\t(No symbol) [0x0x108d973]\n\t(No symbol) [0x0x109f961]\n\t(No symbol) [0x0x109ea30]\n\t(No symbol) [0x0x1094e1c]\n\t(No symbol) [0x0x1093321]\n\t(No symbol) [0x0x1096734]\n\t(No symbol) [0x0x10967c8]\n\t(No symbol) [0x0x10d83ca]\n\t(No symbol) [0x0x10d8461]\n\t(No symbol) [0x0x10cfc83]\n\t(No symbol) [0x0x10f9dfc]\n\t(No symbol) [0x0x10ccbf4]\n\t(No symbol) [0x0x10f9fb4]\n\t(No symbol) [0x0x111b606]\n\t(No symbol) [0x0x10f9bf6]\n\t(No symbol) [0x0x10cb38e]\n\t(No symbol) [0x0x10cc274]\n\tGetHandleVerifier [0x0x14eeda3+2697763]\n\tGetHandleVerifier [0x0x14e9ec7+2677575]\n\tGetHandleVerifier [0x0x1294194+228884]\n\tGetHandleVerifier [0x0x12849f8+165496]\n\tGetHandleVerifier [0x0x128b18d+192013]\n\tGetHandleVerifier [0x0x12747d8+99416]\n\tGetHandleVerifier [0x0x1274972+99826]\n\tGetHandleVerifier [0x0x125ebea+10346]\n\tBaseThreadInitThunk [0x0x76307ba9+25]\n\tRtlInitializeExceptionChain [0x0x7788c2eb+107]\n\tRtlClearBits [0x0x7788c26f+191]","time":{"start":1759784158774,"stop":1759784181927,"duration":23153}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"dc559c31981da6d4.json","parameterValues":[]}
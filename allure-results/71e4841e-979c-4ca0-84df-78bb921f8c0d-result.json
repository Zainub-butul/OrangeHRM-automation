{"name": "test_add_multiple_employees_with_different_data[Alice-Johnson-False]", "status": "failed", "statusDetails": {"message": "AssertionError: ❌ Failed to create employee: Alice Johnson\nassert False\n +  where False = is_employee_saved_successfully()\n +    where is_employee_saved_successfully = <pages.add_employee_page.AddEmployeePage object at 0x000001B5CD2B6D70>.is_employee_saved_successfully", "trace": "self = <tests.PIM.test_add_multiple_employees_with_different_data.TestEmployeeAddition object at 0x000001B5CD2DC190>\nfresh_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3a1ad2b46f3268b2d7001e2c0e0be79e\")>, first_name = 'Alice'\nlast_name = 'Johnson', has_middle_name = False\n\n    @pytest.mark.parametrize(\"first_name,last_name,has_middle_name\", [\n        (\"Alice\", \"Johnson\", False),\n        (\"Bob\", \"Smith\", True),\n        (\"Carol\", \"Davis\", False),\n        (\"David\", \"Wilson\", True),\n        (\"Emma\", \"Brown\", False)\n    ])\n    def test_add_multiple_employees_with_different_data(self, fresh_driver, first_name, last_name, has_middle_name):\n        driver = fresh_driver  # Use fresh browser session\n    \n        print(f\"\\n>>> Test: Add Employee - {first_name} {last_name}\")\n    \n        # Initialize page objects\n        login_page = LoginPage(driver)\n        dashboard_page = DashboardPage(driver)\n        pim_page = PIMPage(driver)\n        add_employee_page = AddEmployeePage(driver)\n    \n        # Step 1: Login\n        login_page.login(Config.USERNAME, Config.PASSWORD)\n    \n        # Step 2: Navigate to Add Employee\n        dashboard_page.navigate_to_pim()\n        pim_page.navigate_to_add_employee()\n    \n        # Step 3: Fill Employee Data\n        middle_name = TestDataGenerator.generate_random_string(6) if has_middle_name else \"\"\n        print(f\">>> Creating employee: {first_name} {middle_name} {last_name}\")\n    \n        add_employee_page.fill_basic_employee_details(first_name, last_name)\n        if middle_name:\n            add_employee_page.fill_middle_name(middle_name)\n    \n        # Step 4: Save Employee\n        employee_id = add_employee_page.get_employee_id()\n        add_employee_page.save_employee()\n    \n        # Step 5: Assert employee was created\n>       assert add_employee_page.is_employee_saved_successfully(), f\"❌ Failed to create employee: {first_name} {last_name}\"\nE       AssertionError: ❌ Failed to create employee: Alice Johnson\nE       assert False\nE        +  where False = is_employee_saved_successfully()\nE        +    where is_employee_saved_successfully = <pages.add_employee_page.AddEmployeePage object at 0x000001B5CD2B6D70>.is_employee_saved_successfully\n\ntests\\PIM\\test_add_multiple_employees_with_different_data.py:76: AssertionError"}, "attachments": [{"name": "log", "source": "63aa32ea-d88f-4685-80fc-aebfa9520736-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "87a6a567-ea31-4d73-a11a-6e99b4da6d7c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "first_name", "value": "'Alice'"}, {"name": "last_name", "value": "'Johnson'"}, {"name": "has_middle_name", "value": "False"}], "start": 1760335549279, "stop": 1760335564769, "uuid": "41e8b08d-1372-4766-a356-d86e513fd9ad", "historyId": "80ef0b821c9d656e55a428f44f5164af", "testCaseId": "79ce4f1908fca3decb7dcdfec97fda17", "fullName": "tests.PIM.test_add_multiple_employees_with_different_data.TestEmployeeAddition#test_add_multiple_employees_with_different_data", "labels": [{"name": "parentSuite", "value": "tests.PIM"}, {"name": "suite", "value": "test_add_multiple_employees_with_different_data"}, {"name": "subSuite", "value": "TestEmployeeAddition"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "7708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.PIM.test_add_multiple_employees_with_different_data"}], "titlePath": ["tests", "PIM", "test_add_multiple_employees_with_different_data.py", "TestEmployeeAddition"]}
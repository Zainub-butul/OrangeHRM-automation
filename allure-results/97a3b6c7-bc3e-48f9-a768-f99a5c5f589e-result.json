{"name": "test_punch_in_out_and_view_records", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.Time.test_attendance.TestAttendance object at 0x000001DFE43CFD90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ee669a10d6599cb127295eda5e9afcd3\")>\n\n    def test_punch_in_out_and_view_records(self, driver):\n        print(\">>> Test: Attendance Punch In/Out and View Records started\")\n    \n        # ---------- Login ----------\n        print(\">>> Logging in with Admin credentials\")\n        login_page = LoginPage(driver)\n        login_page.login(username=\"Admin\", password=\"admin123\")  # replace with valid creds\n        print(\"✅ Login successful\")\n    \n        # ---------- Dashboard ----------\n        print(\">>> Navigating to Time module from Dashboard\")\n        dashboard = DashboardPage(driver)\n        dashboard.navigate_to_time()\n        print(\"✅ Navigation to Time module successful\")\n    \n        # ---------- Attendance ----------\n        attendance = AttendancePage(driver)\n    \n        # Punch In\n        print(\">>> Punching In\")\n>       punch_in_success = attendance.punch_in(note=\"Starting work for the day\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\Time\\test_attendance.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\attendance_page.py:56: in punch_in\n    return self._punch_action(note, action=\"in\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages\\attendance_page.py:64: in _punch_action\n    self.navigate_to_punch_in_out()\npages\\attendance_page.py:42: in navigate_to_punch_in_out\n    option = self.wait.until(EC.element_to_be_clickable(self.punch_in_out_option))\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee669a10d6599cb127295eda5e9afcd3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001DFE454D260>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "d55aa38b-7033-4898-866a-07681058340c-attachment.txt", "type": "text/plain"}], "start": 1760080781279, "stop": 1760080833618, "uuid": "016d61d8-460d-4a8c-b247-faceba36a25f", "historyId": "cb3bf1063a67e052085ac44c3af7ef6a", "testCaseId": "cb3bf1063a67e052085ac44c3af7ef6a", "fullName": "tests.Time.test_attendance.TestAttendance#test_punch_in_out_and_view_records", "labels": [{"name": "parentSuite", "value": "tests.Time"}, {"name": "suite", "value": "test_attendance"}, {"name": "subSuite", "value": "TestAttendance"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "11136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Time.test_attendance"}], "titlePath": ["tests", "Time", "test_attendance.py", "TestAttendance"]}
{"name": "test_login[Admin-wrongPass-invalid]", "status": "failed", "statusDetails": {"message": "AssertionError: ❌ Unexpected error message: CSRF token validation failed\nassert 'CSRF token validation failed' == 'Invalid credentials'\n  \n  \u001b[0m\u001b[91m- Invalid credentials\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  \u001b[92m+ CSRF token validation failed\u001b[39;49;00m\u001b[90m\u001b[39;49;00m", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e54d831941da95af3729060bf862e1f\")>, username = 'Admin', password = 'wrongPass'\nexpected = 'invalid'\n\n    @pytest.mark.parametrize(\"username,password,expected\", test_data)\n    def test_login(driver, username, password, expected):\n        \"\"\"\n        Login test for different scenarios.\n        Uses LoginPage POM with driver fixture from conftest.py\n        \"\"\"\n        log.info(f\"===== START: test_login with username='{username}' and password='{password}' =====\")\n    \n        login_page = LoginPage(driver)\n    \n        # Perform login\n        log.info(f\"Performing login with username='{username}' and password='{password}'\")\n        login_page.login(username, password)\n    \n        if expected == \"valid\":\n            log.info(\"Expecting a successful login\")\n            # Wait for dashboard header to appear\n            dashboard_header = WebDriverWait(driver, 20).until(\n                EC.presence_of_element_located((By.XPATH, \"//h6[text()='Dashboard']\"))\n            )\n            assert dashboard_header.is_displayed(), \"❌ Dashboard header not found\"\n            assert \"dashboard\" in driver.current_url.lower(), \"❌ URL does not contain 'dashboard'\"\n            log.info(\"✅ Login successful, Dashboard header displayed and URL verified\")\n        else:\n            log.info(\"Expecting login to fail\")\n            # Try to capture error message\n            error_message = login_page.get_error_message()\n            if error_message:\n                log.warning(f\"Login failed as expected with error message: '{error_message}'\")\n>               assert error_message == \"Invalid credentials\", f\"❌ Unexpected error message: {error_message}\"\nE               AssertionError: ❌ Unexpected error message: CSRF token validation failed\nE               assert 'CSRF token validation failed' == 'Invalid credentials'\nE                 \nE                 \u001b[0m\u001b[91m- Invalid credentials\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE                 \u001b[92m+ CSRF token validation failed\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\ntests\\Login\\test_login.py:50: AssertionError"}, "description": "\nLogin test for different scenarios.\nUses LoginPage POM with driver fixture from conftest.py\n", "attachments": [{"name": "log", "source": "7d2c67b7-8f49-4465-af33-13c31835d5a0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'Admin'"}, {"name": "password", "value": "'wrongPass'"}, {"name": "expected", "value": "'invalid'"}], "start": 1760335419224, "stop": 1760335426249, "uuid": "86bbac43-e791-49be-af37-fef4da3e1797", "historyId": "9735c7972f40ed49c5ecc614bcb068ec", "testCaseId": "bdc0947ba3485b275a71e2b4b0c55aa0", "fullName": "tests.Login.test_login#test_login", "labels": [{"name": "parentSuite", "value": "tests.Login"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-AQ7JHBIL"}, {"name": "thread", "value": "7708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Login.test_login"}], "titlePath": ["tests", "Login", "test_login.py"]}